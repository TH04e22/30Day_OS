     1 00000000                                 ; naskfunc
     2 00000000                                 ; TAB = 4
     3 00000000                                 
     4 00000000                                 [FORMAT "WCOFF"]		; 目的檔案的製作模式
     5 00000000                                 [INSTRSET "i486p"]		
     6 00000000                                 [BITS 32]				; 用來製作32位元模式的代碼
     7 00000000                                 [FILE "naskfunc.nas"]	; 原始檔案名稱
     8 00000000                                 
     9 00000000                                 		GLOBAL	_io_hlt, _io_cli, _io_sti, _io_stihlt
    10 00000000                                 		GLOBAL	_io_in8,  _io_in16,  _io_in32
    11 00000000                                 		GLOBAL	_io_out8, _io_out16, _io_out32
    12 00000000                                 		GLOBAL	_io_load_eflags, _io_store_eflags
    13 00000000                                 		GLOBAL	_load_gdtr, _load_idtr, _load_tr, _farjmp
    14 00000000                                 		GLOBAL	_asm_inthandler21, _asm_inthandler27, _asm_inthandler2c
    15 00000000                                 		GLOBAL  _asm_inthandler20, _asm_inthandler0d, _asm_inthandler0c
    16 00000000                                 		GLOBAL  _load_cr0, _store_cr0, _memtest_sub
    17 00000000                                 		GLOBAL  _farcall, _asm_hrb_api, _start_app
    18 00000000                                 		GLOBAL  _asm_end_app
    19 00000000                                 		EXTERN	_inthandler21, _inthandler27, _inthandler2c
    20 00000000                                 		EXTERN  _inthandler20, _inthandler0d, _hrb_api, _inthandler0c
    21 00000000                                 
    22                                          [SECTION .text]
    23 00000000                                 
    24 00000000                                 _io_hlt:	; void io_hlt(void);
    25 00000000 F4                              		HLT
    26 00000001 C3                              		RET
    27 00000002                                 
    28 00000002                                 _io_cli:	; void io_cli(void);
    29 00000002 FA                              		CLI
    30 00000003 C3                              		RET
    31 00000004                                 
    32 00000004                                 _io_sti:	; void io_sti(void);
    33 00000004 FB                              		STI
    34 00000005 C3                              		RET
    35 00000006                                 
    36 00000006                                 _io_stihlt:	; void io_stihlt(void);
    37 00000006 FB                              		STI
    38 00000007 F4                              		HLT
    39 00000008 C3                              		RET
    40 00000009                                 
    41 00000009                                 _io_in8:	; int io_in8(int port);
    42 00000009 8B 54 24 04                     		MOV		EDX,[ESP+4]		; port
    43 0000000D B8 00000000                     		MOV		EAX,0
    44 00000012 EC                              		IN		AL,DX
    45 00000013 C3                              		RET
    46 00000014                                 
    47 00000014                                 _io_in16:	; int io_in16(int port);
    48 00000014 8B 54 24 04                     		MOV		EDX,[ESP+4]		; port
    49 00000018 B8 00000000                     		MOV		EAX,0
    50 0000001D 66 ED                           		IN		AX,DX
    51 0000001F C3                              		RET
    52 00000020                                 
    53 00000020                                 _io_in32:	; int io_in32(int port);
    54 00000020 8B 54 24 04                     		MOV		EDX,[ESP+4]		; port
    55 00000024 ED                              		IN		EAX,DX
    56 00000025 C3                              		RET
    57 00000026                                 
    58 00000026                                 _io_out8:	; void io_out8(int port, int data);
    59 00000026 8B 54 24 04                     		MOV		EDX,[ESP+4]		; port
    60 0000002A 8A 44 24 08                     		MOV		AL,[ESP+8]		; data
    61 0000002E EE                              		OUT		DX,AL
    62 0000002F C3                              		RET
    63 00000030                                 
    64 00000030                                 _io_out16:	; void io_out16(int port, int data);
    65 00000030 8B 54 24 04                     		MOV		EDX,[ESP+4]		; port
    66 00000034 8B 44 24 08                     		MOV		EAX,[ESP+8]		; data
    67 00000038 66 EF                           		OUT		DX,AX
    68 0000003A C3                              		RET
    69 0000003B                                 
    70 0000003B                                 _io_out32:	; void io_out32(int port, int data);
    71 0000003B 8B 54 24 04                     		MOV		EDX,[ESP+4]		; port
    72 0000003F 8B 44 24 08                     		MOV		EAX,[ESP+8]		; data
    73 00000043 EF                              		OUT		DX,EAX
    74 00000044 C3                              		RET
    75 00000045                                 
    76 00000045                                 _io_load_eflags:	; int io_load_eflags(void);
    77 00000045 9C                              		PUSHFD		; PUSH EFLAGS 以double word
    78 00000046 58                              		POP		EAX
    79 00000047 C3                              		RET
    80 00000048                                 
    81 00000048                                 _io_store_eflags:	; void io_store_eflags(int eflags);
    82 00000048 8B 44 24 04                     		MOV		EAX,[ESP+4]
    83 0000004C 50                              		PUSH	EAX
    84 0000004D 9D                              		POPFD		; POP EFLAGS
    85 0000004E C3                              		RET
    86 0000004F                                 
    87 0000004F                                 _load_gdtr:		; void load_gdtr(int limit, int addr);
    88 0000004F 66 8B 44 24 04                  		MOV		AX,[ESP+4]		; limit
    89 00000054 66 89 44 24 06                  		MOV		[ESP+6],AX
    90 00000059 0F 01 54 24 06                  		LGDT	[ESP+6]
    91 0000005E C3                              		RET
    92 0000005F                                 
    93 0000005F                                 _load_idtr:		; void load_idtr(int limit, int addr);
    94 0000005F 66 8B 44 24 04                  		MOV		AX,[ESP+4]		; limit
    95 00000064 66 89 44 24 06                  		MOV		[ESP+6],AX
    96 00000069 0F 01 5C 24 06                  		LIDT	[ESP+6]
    97 0000006E C3                              		RET
    98 0000006F                                 
    99 0000006F                                 _load_tr:		; void load_tr( int tr );
   100 0000006F 0F 00 5C 24 04                  		LTR		[ESP+4] ; tr
   101 00000074 C3                              		RET
   102 00000075                                 
   103 00000075                                 _farjmp:		; void farjmp( int eip, int cs );
   104 00000075 FF 6C 24 04                     		JMP		FAR [ESP+4] ; eip, cs
   105 00000079 C3                              		RET
   106 0000007A                                 
   107 0000007A                                 _farcall: ; void farcall( int eip, int cs );
   108 0000007A FF 5C 24 04                     		CALL	FAR[ESP + 4]
   109 0000007E C3                              		RET
   110 0000007F                                 
   111 0000007F                                 _asm_inthandler21:
   112 0000007F 06                              		PUSH	ES
   113 00000080 1E                              		PUSH	DS
   114 00000081 60                              		PUSHAD
   115 00000082 89 E0                           		MOV		EAX, ESP
   116 00000084 50                              		PUSH	EAX
   117 00000085 66 8C D0                        		MOV		AX, SS
   118 00000088 8E D8                           		MOV		DS, AX
   119 0000008A 8E C0                           		MOV		ES, AX
   120 0000008C E8 [00000000]                   		CALL	_inthandler21
   121 00000091 58                              		POP		EAX
   122 00000092 61                              		POPAD
   123 00000093 1F                              		POP		DS
   124 00000094 07                              		POP		ES
   125 00000095 CF                              		IRETD
   126 00000096                                 
   127 00000096                                 _asm_inthandler27:
   128 00000096 06                              		PUSH	ES
   129 00000097 1E                              		PUSH	DS
   130 00000098 60                              		PUSHAD
   131 00000099 89 E0                           		MOV		EAX, ESP
   132 0000009B 50                              		PUSH	EAX
   133 0000009C 66 8C D0                        		MOV		AX, SS
   134 0000009F 8E D8                           		MOV		DS, AX
   135 000000A1 8E C0                           		MOV		ES, AX
   136 000000A3 E8 [00000000]                   		CALL	_inthandler27
   137 000000A8 58                              		POP		EAX
   138 000000A9 61                              		POPAD
   139 000000AA 1F                              		POP		DS
   140 000000AB 07                              		POP		ES
   141 000000AC CF                              		IRETD
   142 000000AD                                 
   143 000000AD                                 _asm_inthandler2c:
   144 000000AD 06                              		PUSH	ES
   145 000000AE 1E                              		PUSH	DS
   146 000000AF 60                              		PUSHAD
   147 000000B0 89 E0                           		MOV		EAX, ESP
   148 000000B2 50                              		PUSH	EAX
   149 000000B3 66 8C D0                        		MOV		AX, SS
   150 000000B6 8E D8                           		MOV		DS, AX
   151 000000B8 8E C0                           		MOV		ES, AX
   152 000000BA E8 [00000000]                   		CALL	_inthandler2c
   153 000000BF 58                              		POP		EAX
   154 000000C0 61                              		POPAD
   155 000000C1 1F                              		POP		DS
   156 000000C2 07                              		POP		ES
   157 000000C3 CF                              		IRETD
   158 000000C4                                 
   159 000000C4                                 _asm_inthandler20:
   160 000000C4 06                              		PUSH	ES
   161 000000C5 1E                              		PUSH	DS
   162 000000C6 60                              		PUSHAD
   163 000000C7 89 E0                           		MOV		EAX, ESP
   164 000000C9 50                              		PUSH	EAX
   165 000000CA 66 8C D0                        		MOV		AX, SS
   166 000000CD 8E D8                           		MOV		DS, AX
   167 000000CF 8E C0                           		MOV		ES, AX
   168 000000D1 E8 [00000000]                   		CALL	_inthandler20
   169 000000D6 58                              		POP		EAX
   170 000000D7 61                              		POPAD
   171 000000D8 1F                              		POP		DS
   172 000000D9 07                              		POP		ES
   173 000000DA CF                              		IRETD
   174 000000DB                                 
   175 000000DB                                 _asm_inthandler0d:
   176 000000DB FB                              		STI
   177 000000DC 06                              		PUSH	ES
   178 000000DD 1E                              		PUSH	DS
   179 000000DE 60                              		PUSHAD
   180 000000DF 89 E0                           		MOV		EAX, ESP
   181 000000E1 50                              		PUSH	EAX
   182 000000E2 66 8C D0                        		MOV		AX, SS
   183 000000E5 8E D8                           		MOV		DS, AX
   184 000000E7 8E C0                           		MOV		ES, AX
   185 000000E9 E8 [00000000]                   		CALL	_inthandler0d
   186 000000EE 83 F8 00                        		CMP		EAX, 0
   187 000000F1 0F 85 00000093                  		JNE		end_app
   188 000000F7 58                              		POP		EAX
   189 000000F8 61                              		POPAD
   190 000000F9 1F                              		POP		DS
   191 000000FA 07                              		POP		ES
   192 000000FB 83 C4 04                        		ADD		ESP, 4
   193 000000FE CF                              		IRETD
   194 000000FF                                 
   195 000000FF                                 _asm_inthandler0c:
   196 000000FF FB                              		STI
   197 00000100 06                              		PUSH	ES
   198 00000101 1E                              		PUSH	DS
   199 00000102 60                              		PUSHAD
   200 00000103 89 E0                           		MOV		EAX, ESP
   201 00000105 50                              		PUSH	EAX
   202 00000106 66 8C D0                        		MOV		AX, SS
   203 00000109 8E D8                           		MOV		DS, AX
   204 0000010B 8E C0                           		MOV		ES, AX
   205 0000010D E8 [00000000]                   		CALL	_inthandler0c
   206 00000112 83 F8 00                        		CMP		EAX, 0
   207 00000115 75 73                           		JNE		end_app
   208 00000117 58                              		POP		EAX
   209 00000118 61                              		POPAD
   210 00000119 1F                              		POP		DS
   211 0000011A 07                              		POP		ES
   212 0000011B 83 C4 04                        		ADD		ESP, 4
   213 0000011E CF                              		IRETD
   214 0000011F                                 
   215 0000011F                                 _load_cr0: ; int load_cr0(void);
   216 0000011F 0F 20 C0                        		MOV		EAX, CR0
   217 00000122 C3                              		RET
   218 00000123                                 
   219 00000123                                 _store_cr0: ; void store_cr0( int cr0 );
   220 00000123 8B 44 24 04                     		MOV		EAX, [ESP+4]
   221 00000127 0F 22 C0                        		MOV		CR0, EAX
   222 0000012A C3                              		RET
   223 0000012B                                 
   224 0000012B                                 _memtest_sub:	; unsigned int memtest_sub(unsigned int start, unsigned int end)
   225 0000012B 57                              		PUSH	EDI						; 因為會使用到EBX, ESI EDI
   226 0000012C 56                              		PUSH	ESI
   227 0000012D 53                              		PUSH	EBX
   228 0000012E BE AA55AA55                     		MOV		ESI,0xaa55aa55			; pat0 = 0xaa55aa55;
   229 00000133 BF 55AA55AA                     		MOV		EDI,0x55aa55aa			; pat1 = 0x55aa55aa;
   230 00000138 8B 44 24 10                     		MOV		EAX,[ESP+12+4]			; i = start;
   231 0000013C                                 mts_loop:
   232 0000013C 89 C3                           		MOV		EBX,EAX
   233 0000013E 81 C3 00000FFC                  		ADD		EBX,0xffc				; p = i + 0xffc;
   234 00000144 8B 13                           		MOV		EDX,[EBX]				; old = *p;
   235 00000146 89 33                           		MOV		[EBX],ESI				; *p = pat0;
   236 00000148 83 33 FF                        		XOR		DWORD [EBX],0xffffffff	; *p ^= 0xffffffff;
   237 0000014B 3B 3B                           		CMP		EDI,[EBX]				; if (*p != pat1) goto fin;
   238 0000014D 75 18                           		JNE		mts_fin
   239 0000014F 83 33 FF                        		XOR		DWORD [EBX],0xffffffff	; *p ^= 0xffffffff;
   240 00000152 3B 33                           		CMP		ESI,[EBX]				; if (*p != pat0) goto fin;
   241 00000154 75 11                           		JNE		mts_fin
   242 00000156 89 13                           		MOV		[EBX],EDX				; *p = old;
   243 00000158 05 00001000                     		ADD		EAX,0x1000				; i += 0x1000;
   244 0000015D 3B 44 24 14                     		CMP		EAX,[ESP+12+8]			; if (i <= end) goto mts_loop;
   245 00000161 76 D9                           		JBE		mts_loop
   246 00000163 5B                              		POP		EBX
   247 00000164 5E                              		POP		ESI
   248 00000165 5F                              		POP		EDI
   249 00000166 C3                              		RET
   250 00000167                                 mts_fin:
   251 00000167 89 13                           		MOV		[EBX],EDX				; *p = old;
   252 00000169 5B                              		POP		EBX
   253 0000016A 5E                              		POP		ESI
   254 0000016B 5F                              		POP		EDI
   255 0000016C C3                              		RET
   256 0000016D                                 
   257 0000016D                                 _asm_hrb_api:
   258 0000016D FB                              		STI
   259 0000016E 1E                              		PUSH	DS
   260 0000016F 06                              		PUSH	ES
   261 00000170 60                              		PUSHAD  ; 為了保存的PUSH
   262 00000171 60                              		PUSHAD  ; 為了交給hrb_api的PUSH
   263 00000172 66 8C D0                        		MOV		AX, SS
   264 00000175 8E D8                           		MOV		DS, AX			  ; OS用的區段也放入DS和ES
   265 00000177 8E C0                           		MOV		ES, AX
   266 00000179 E8 [00000000]                   		CALL	_hrb_api
   267 0000017E 83 F8 00                        		CMP		EAX, 0			  ; 若EAX不是0的話，應用程式將會執行結束的處理
   268 00000181 75 07                           		JNE		end_app
   269 00000183 83 C4 20                        		ADD		ESP, 32
   270 00000186 61                              		POPAD
   271 00000187 07                              		POP		ES
   272 00000188 1F                              		POP		DS
   273 00000189 CF                              		IRETD
   274 0000018A                                 end_app:
   275 0000018A                                 ; EAX是tss.esp0的號碼
   276 0000018A 8B 20                           		MOV		ESP, [EAX]
   277 0000018C 61                              		POPAD
   278 0000018D C3                              		RET						; 回到cmd_app
   279 0000018E                                 
   280 0000018E                                 _asm_end_app:
   281 0000018E                                 ; EAX是tss.esp0的位址
   282 0000018E 8B 20                           		MOV		ESP, [ EAX ]
   283 00000190 C7 40 04 00000000               		MOV		DWORD [ EAX + 4 ], 0
   284 00000197 61                              		POPAD
   285 00000198 C3                              		RET						; 回到cmd_app
   286 00000199                                 
   287 00000199                                 _start_app: ; void start_app( int eip, int cs, int esp, int ds, int *tss_esp0 );
   288 00000199 60                              		PUSHAD					  ; 32位元的暫存器全部儲存
   289 0000019A 8B 44 24 24                     		MOV		EAX, [ ESP + 36 ] ; 應用程式用的EIP
   290 0000019E 8B 4C 24 28                     		MOV		ECX, [ ESP + 40 ] ; 應用程式用的CS
   291 000001A2 8B 54 24 2C                     		MOV		EDX, [ ESP + 44 ] ; 應用程式用的ESP
   292 000001A6 8B 5C 24 30                     		MOV		EBX, [ ESP + 48 ] ; 應用程式用的DS/SS
   293 000001AA 8B 6C 24 34                     		MOV		EBP, [ ESP + 52 ] ; tss.esp0的位址
   294 000001AE 89 65 00                        		MOV		[ EBP ], ESP	  ; 儲存OS用的ESP
   295 000001B1 8C 55 04                        		MOV		[ EBP + 4 ], SS		  ; 儲存OS用的SS
   296 000001B4 8E C3                           		MOV		ES, BX
   297 000001B6 8E DB                           		MOV     DS, BX
   298 000001B8 8E E3                           		MOV     FS, BX
   299 000001BA 8E EB                           		MOV     GS, BX
   300 000001BC                                 ; 以下是為了用RETF讓應用程式可以執行，所作調整堆疊的內容
   301 000001BC 83 C9 03                        		OR		ECX, 3            ; 應用程式用的區段位址與數值3進行OR運算
   302 000001BF 83 CB 03                        		OR		EBX, 3
   303 000001C2 53                              		PUSH	EBX				  ; 應用程式用的SS
   304 000001C3 52                              		PUSH	EDX				  ; 應用程式用的ESP
   305 000001C4 51                              		PUSH	ECX				  ; 應用程式用的CS
   306 000001C5 50                              		PUSH	EAX	              ; 應用程式用的EIP
   307 000001C6 CB                              		RETF
   308 000001C7                                 ; 應用程式結束後也不會回到這裡